services:
  minio:
    build:
      context: ./service/minio
      args:
        - MINIO_VERSION=${MINIO_VERSION}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${MINIO_HTTP_PORT}:9000"
      - "${BIND_ADDRESS}${BIND_COLON}${MINIO_CONSOLE_PORT}:9001"
    command: server --console-address ':9001' /data
    volumes:
      - ${DATA_DIR}/minio/data:/data
  neo4j:
    build:
      context: ./service/neo4j
      args:
        - NEO4J_VERSION=${NEO4J_VERSION}
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME}/${NEO4J_PASSWORD}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${NEO4J_HTTP_PORT}:7474"
      - "${BIND_ADDRESS}${BIND_COLON}${NEO4J_BOLT_PORT}:7687"
    volumes:
      - ${DATA_DIR}/neo4j/data:/data
      - ${DATA_DIR}/neo4j/logs:/logs
  postgres:
    build:
      context: ./service/postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${POSTGRES_PORT}:5432"
    volumes:
      - ${DATA_DIR}/postgres/data:/var/lib/postgresql/data
      - ${DATA_DIR}/postgres/archive:/var/lib/postgresql/archive
  openresty:
    build:
      context: ./service/openresty
      args:
        - OPENRESTY_VERSION=${OPENRESTY_VERSION}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${OPENRESTY_PORT}:80"
    volumes:
      - ./service/openresty/default.conf:/etc/nginx/conf.d/default.conf
      - ${DATA_DIR}/openresty/logs:/usr/local/openresty/nginx/logs
      - ../static/resources/images/bi/analyse.gif:/usr/local/openresty/nginx/html/analyse.gif
  zookeeper:
    build:
      context: ./service/zookeeper
      args:
        - ZOOKEEPER_VERSION=${ZOOKEEPER_VERSION}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${ZOOKEEPER_CLIENT_PORT}:2181"
    volumes:
      - ${DATA_DIR}/zookeeper/data:/data
      - ${DATA_DIR}/zookeeper/logs:/datalog
  elasticsearch:
    build:
      context: ./service/elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${ELASTICSEARCH_HTTP_PORT}:9200"
      - "${BIND_ADDRESS}${BIND_COLON}${ELASTICSEARCH_CLIENT_PORT}:9300"
    volumes:
      - ${DATA_DIR}/elasticsearch:/usr/share/elasticsearch/data
      - ./service/elasticsearch/IKAnalyzer.cfg.xml:/usr/share/elasticsearch/plugins/analysis-ik-online/IKAnalyzer.cfg.xml
      - ./service/elasticsearch/java.policy:/usr/share/elasticsearch/jdk/conf/security/java.policy
  kibana:
    build:
      context: ./service/kibana
      args:
        - ELK_VERSION=${ELK_VERSION}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${KIBANA_HTTP_PORT}:5601"
  kafka:
    build:
      context: ./service/kafka
      args:
        - SCALA_VERSION=${SCALA_VERSION}
        - KAFKA_VERSION=${KAFKA_VERSION}
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181/kafka
      KAFKA_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LOG_DIRS: /kafka/kafka-logs
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${KAFKA_LISTEN_PORT}:9092"
    volumes:
      - ${DATA_DIR}/kafka/data:/kafka
      - ${DATA_DIR}/kafka/logs:/opt/kafka/logs
  kafdrop:
    build:
      context: ./service/kafdrop
      args:
        - KAFDROP_VERSION=${KAFDROP_VERSION}
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${KAFDROP_PORT}:9000"
  mysql:
    build:
      context: ./service/mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${MYSQL_PORT}:3306"
    volumes:
      - ${DATA_DIR}/mysql:/var/lib/mysql
      # - ./service/mysql/mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro
  mongo:
    build:
      context: ./service/mongo
      args:
        - MONGO_VERSION=${MONGO_VERSION}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${MONGO_PORT}:27017"
    volumes:
      - ${DATA_DIR}/mongo:/data/db
  redis:
    build:
      context: ./service/redis
      args:
        - REDIS_VERSION=${REDIS_VERSION}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${REDIS_PORT}:6379"
    volumes:
      - ${DATA_DIR}/redis:/data
  rabbitmq:
    build:
      context: ./service/rabbitmq
      args:
        - RABBITMQ_VERSION=${RABBITMQ_VERSION}
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${RABBITMQ_SERVER_PORT}:5672"
      - "${BIND_ADDRESS}${BIND_COLON}${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - ${DATA_DIR}/rabbitmq:/var/lib/rabbitmq/mnesia
  filebeat:
    build:
      context: ./service/filebeat
      args:
        - ELK_VERSION=${ELK_VERSION}
    command: ["-environment", "container", "-strict.perms=false"]
    volumes:
      - ./service/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ${DATA_DIR}/filebeat/data:/usr/share/filebeat/data
      - ${DATA_DIR}/filebeat/logs:/usr/share/filebeat/logs
      - ${FILEBEAT_NGINX_ACCESS}:/data/fs-logs/nginx/access.log
      - ${FILEBEAT_MYSQL_SLOW_QUERY}:/data/fs-logs/mysql/slow-query.log
  logstash:
    build:
      context: ./service/logstash
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - ./service/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./service/logstash/pipeline:/usr/share/logstash/pipeline
  prometheus:
    user: root
    build:
      context: ./service/prometheus
      args:
        - PROMETHEUS_VERSION=${PROMETHEUS_VERSION}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${PROMETHEUS_PORT}:9090"
    volumes:
      - /etc/localtime:/etc/localtime
      - ./service/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${DATA_DIR}/prometheus/tsdb:/prometheus
  grafana:
    user: root
    build:
      context: ./service/grafana
      args:
        - GRAFANA_VERSION=${GRAFANA_VERSION}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${GRAFANA_PORT}:3000"
    volumes:
      - ${DATA_DIR}/grafana/data:/var/lib/grafana
      - ${DATA_DIR}/grafana/logs:/var/log/grafana
  prometheus-node:
    network_mode: host
    build:
      context: ./service/prometheus/exporter/node
      args:
        - PROMETHEUS_NODE_VERSION=${PROMETHEUS_NODE_VERSION}
  prometheus-redis:
    build:
      context: ./service/prometheus/exporter/redis
      args:
        - PROMETHEUS_REDIS_VERSION=${PROMETHEUS_REDIS_VERSION}
    environment:
      REDIS_ADDR: redis://redis:6379
  prometheus-mysql:
    build:
      context: ./service/prometheus/exporter/mysql
      args:
        - PROMETHEUS_MYSQL_VERSION=${PROMETHEUS_MYSQL_VERSION}
    environment:
      DATA_SOURCE_NAME: ${PROMETHEUS_MYSQL_URL}
  prometheus-kafka:
    build:
      context: ./service/prometheus/exporter/kafka
      args:
        - PROMETHEUS_KAFKA_VERSION=${PROMETHEUS_KAFKA_VERSION}
    command: "--kafka.server=kafka:9092 --kafka.version=${KAFKA_VERSION}"
  superset:
    build:
      context: ./service/superset
      args:
        - SUPERSET_VERSION=${SUPERSET_VERSION}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${SUPERSET_HTTP_PORT}:8088"
    volumes:
      - ./service/superset/config.py:/app/superset/config.py
  clickhouse:
    privileged: true
    build:
      context: ./service/clickhouse
      args:
        - CLICKHOUSE_VERSION=${CLICKHOUSE_VERSION}
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${CLICKHOUSE_HTTP_PORT}:8123"
      - "${BIND_ADDRESS}${BIND_COLON}${CLICKHOUSE_CLIENT_PORT}:9000"
    volumes:
      - ${DATA_DIR}/clickhouse/data:/var/lib/clickhouse
      - ${DATA_DIR}/clickhouse/logs:/val/log/clickhouse-server
      - ./service/clickhouse/etc/config.xml:/etc/clickhouse-server/config.xml
      - ./service/clickhouse/etc/metrika.xml:/etc/clickhouse-server/config.d/metrika.xml
  trino:
    user: root
    build:
      context: ./service/trino
      args:
        - TRINO_VERSION=${TRINO_VERSION}
    ports:
      - "${BIND_ADDRESS}${BIND_COLON}${TRINO_PORT}:8080"
    volumes:
      - ${DATA_DIR}/trino/data:/data/trino
      - ./service/trino/jvm.config:/etc/jvm.config
      - ./service/trino/etc/catalog:/etc/trino/catalog
